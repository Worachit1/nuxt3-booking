// AI Smart Search - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ API ‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
// ‡πÉ‡∏ä‡πâ Natural Language Processing ‡πÅ‡∏ö‡∏ö Pattern Matching
export default defineEventHandler(async (event) => {
  try {
  const body = await readBody(event);
  const { query, rooms, buildings, roomTypes } = body;

    console.log('üîç AI Smart Search Query:', query);
    
    // ===== AI Pattern Matching - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ External API =====
    
    const queryLower = query.toLowerCase();
    
    // 1. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á min ‡πÅ‡∏•‡∏∞ max
    let capacity_min = null;
    let capacity_max = null;
    
    const capacityMatch = query.match(/(\d+)\s*(‡∏Ñ‡∏ô|‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á|seat)/i);
    if (capacityMatch) {
      
      // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô max ‡∏´‡∏£‡∏∑‡∏≠ min
        const numberRaw = parseInt(capacityMatch[1]);
        const number = Number.isNaN(numberRaw) ? null : numberRaw;

        if (number !== null) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏™‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏Ñ‡∏£‡πà‡∏á (strict) vs ‡∏£‡∏ß‡∏° (inclusive)
    // NOTE: \b word-boundary does not work reliably with Thai; use includes() for Thai words.
    const isStrictLess = (queryLower.includes('‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤') || queryLower.includes('‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤') || /<(?!=)/.test(query));
    const isLessOrEqual = (queryLower.includes('‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô') || queryLower.includes('‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î') || queryLower.includes('max') || /<=/.test(query));

    const isStrictGreater = (queryLower.includes('‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤') || />(?!=)/.test(query));
    const isGreaterOrEqual = (queryLower.includes('‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢') || queryLower.includes('‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥') || queryLower.includes('min') || />=/.test(query));

    const isAround = (queryLower.includes('‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì') || queryLower.includes('‡∏£‡∏≤‡∏ß') || queryLower.includes('around') || queryLower.includes('about'));

          // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ min/max ‡∏ï‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ä‡πâ
          if (isStrictLess) {
            // "‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 50" => capacity < 50 => max = 49
            capacity_max = Math.max(0, number - 1);
          } else if (isLessOrEqual) {
            // "‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 50" ‡∏´‡∏£‡∏∑‡∏≠ "<=50" => capacity <= 50
            capacity_max = number;
          } else if (isGreaterOrEqual) {
            // "‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 50" => capacity >= 50
            capacity_min = number;
          } else if (isStrictGreater) {
            // "‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 50" => capacity > 50 => min = 51
            capacity_min = number + 1;
          } else if (isAround) {
            // "‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 40" ‡πÉ‡∏´‡πâ‡∏´‡∏≤‡πÅ‡∏ö‡∏ö +/- 20%
            capacity_min = Math.floor(number * 0.8);
            capacity_max = Math.ceil(number * 1.2);
          } else {
            // default: ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏ ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô min (‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏µ‡πâ)
            capacity_min = number;
          }

    // ‡πÄ‡∏Å‡πá‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ (explanation)
    // (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô "‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ N" ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á "‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô M")
    (globalThis as any).__lastParsedCapacity = { number, isStrictLess, isLessOrEqual, isStrictGreater, isGreaterOrEqual, isAround };

    // Debug log: show how capacity was parsed for this query
    console.log('üîé Parsed capacity:', (globalThis as any).__lastParsedCapacity, '=>', { capacity_min, capacity_max });
      }
    }
    
    // 2. ‡πÅ‡∏°‡∏û‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡πâ‡∏≠‡∏á (Synonym Mapping)
    const roomTypePatterns = {
      '‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå': ['‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå', '‡∏Ñ‡∏≠‡∏°', '‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå', '‡∏´‡πâ‡∏≠‡∏á‡∏Ñ‡∏≠‡∏°', 'computer'],
      '‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢': ['‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢', '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', 'lecture', '‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'],
      '‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°': ['‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°', 'meeting', '‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°'],
      '‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£': ['‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£', 'lab', '‡πÅ‡∏•‡πá‡∏ö'],
      '‡∏™‡∏±‡∏°‡∏°‡∏ô‡∏≤': ['‡∏™‡∏±‡∏°‡∏°‡∏ô‡∏≤', 'seminar'],
      '‡∏Å‡∏µ‡∏¨‡∏≤': ['‡∏Å‡∏µ‡∏¨‡∏≤', '‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏µ‡∏¨‡∏≤', '‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™', '‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢', 'sport', 'gym'],
    };
    
    // 3. ‡πÅ‡∏°‡∏û‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£
    const buildingPatterns = {
      '‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£': ['‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£', 'administration'],
      '‡πÄ‡∏â‡∏•‡∏¥‡∏°': ['‡πÄ‡∏â‡∏•‡∏¥‡∏°', 'chaloem'],
      '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå': ['‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', 'science'],
    };
    
    // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á/‡∏£‡∏´‡∏±‡∏™‡∏´‡πâ‡∏≠‡∏á (‡πÄ‡∏ä‡πà‡∏ô "NK 1201", "‡∏´‡πâ‡∏≠‡∏á 101")
    const roomNameMatch = query.match(/(?:‡∏´‡πâ‡∏≠‡∏á\s*)?([A-Z]{1,3}\s*\d{3,4}|\d{3,4})/i);
    let searchByRoomName = false;
    
    // 5. ‡∏´‡∏≤ keywords ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    let keywords: string[] = [];
    let explanation = '';
    
    // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á
    if (roomNameMatch) {
      let roomName = roomNameMatch[1].toUpperCase().trim();
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á variations ‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á
      const variations = new Set<string>();
      
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏ä‡πà‡∏ô "NK 1201")
      if (roomName.includes(' ')) {
        variations.add(roomName);                    // "NK 1201"
        variations.add(roomName.replace(/\s/g, ''));  // "NK1201"
        variations.add(roomName.replace(/\s/g, '-')); // "NK-1201"
      } 
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á (‡πÄ‡∏ä‡πà‡∏ô "NK1201")
      else {
        variations.add(roomName);                    // "NK1201"
        // ‡πÅ‡∏ó‡∏£‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
        const withSpace = roomName.replace(/([A-Z]+)(\d+)/, '$1 $2'); // "NK 1201"
        variations.add(withSpace);
        variations.add(roomName.replace(/([A-Z]+)(\d+)/, '$1-$2')); // "NK-1201"
      }
      
      keywords = Array.from(variations);
      explanation = `‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡πâ‡∏≠‡∏á ${roomName}`;
      searchByRoomName = true;
      
      console.log('üîç Room name variations:', keywords);
    }
    
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡πâ‡∏≠‡∏á (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á)
    let matchedTypeKey: string | null = null;
    if (!searchByRoomName) {
      for (const [type, patterns] of Object.entries(roomTypePatterns)) {
        if (patterns.some(p => queryLower.includes(p))) {
          keywords.push(...patterns);
          explanation = `‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡πâ‡∏≠‡∏á${type}`;
          matchedTypeKey = type; // ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö ‡πÄ‡∏ä‡πà‡∏ô '‡∏Å‡∏µ‡∏¨‡∏≤'
          break;
        }
      }
    }
    
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£
    for (const [building, patterns] of Object.entries(buildingPatterns)) {
      if (patterns.some(p => queryLower.includes(p))) {
        keywords.push(...patterns);
        explanation += (explanation ? ' ‡πÉ‡∏ô' : '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô') + `‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£${building}`;
        break;
      }
    }
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ pattern ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    if (keywords.length === 0) {
      keywords = query.split(/\s+/).filter((w: string) => w.length > 1);
      explanation = `‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö "${query}"`;
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á explanation ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏≥‡∏ô‡∏ß‡∏ô "‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤/‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô/‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤/‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢")
    const lastParsed = (globalThis as any).__lastParsedCapacity || null;
    if (capacity_max && capacity_min) {
      explanation += ` ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${capacity_min}-${capacity_max} ‡∏Ñ‡∏ô`;
    } else if (capacity_max) {
      if (lastParsed && lastParsed.isStrictLess) {
        explanation += ` ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ ${lastParsed.number} ‡∏Ñ‡∏ô`;
      } else {
        explanation += ` ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô ${capacity_max} ‡∏Ñ‡∏ô`;
      }
    } else if (capacity_min) {
      if (lastParsed && lastParsed.isStrictGreater) {
        explanation += ` ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ ${lastParsed.number} ‡∏Ñ‡∏ô`;
      } else {
        explanation += ` ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ ${capacity_min} ‡∏Ñ‡∏ô`;
      }
    }
    
    console.log('ü§ñ AI Analysis:', { 
      capacity_min, 
      capacity_max, 
      keywords, 
      explanation,
      searchByRoomName 
    });
    
    // Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≤
    console.log('üìä Total rooms received:', rooms.length);
    if (rooms.length > 0) {
      console.log('üìù Sample room:', {
        name: rooms[0].name,
        description: rooms[0].description,
        capacity: rooms[0].capacity,
        building: rooms[0].building,
        is_available: rooms[0].is_available
      });
    }
    
    // ===== ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå =====

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° filters ‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ
    let filteredRooms = rooms;
    
    // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á) ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡πâ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
    // ‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô '‡∏ß‡πà‡∏≤‡∏á' / '‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' / 'available'
    const wantOnlyAvailable = /\b(‡∏ß‡πà‡∏≤‡∏á|‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô|available|free|vacant)\b/.test(queryLower);
    if (!searchByRoomName && wantOnlyAvailable) {
      filteredRooms = filteredRooms.filter((room: any) => {
        const available = room.is_available;
        return available === true || available === 1 || available === '1' || String(available).toLowerCase() === 'true';
      });
    }

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° capacity (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á min ‡πÅ‡∏•‡∏∞ max)
    if (capacity_min) {
      filteredRooms = filteredRooms.filter((r: any) => r.capacity >= capacity_min);
    }
    if (capacity_max) {
      filteredRooms = filteredRooms.filter((r: any) => r.capacity <= capacity_max);
    }

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡πÅ‡∏•‡∏∞ client ‡∏™‡πà‡∏á roomTypes ‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢
    // ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏õ‡πá‡∏ô room_type_id ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏Å‡∏±‡∏ö rooms ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ id
    let matchedTypeIds: string[] = [];
    if (matchedTypeKey && Array.isArray(roomTypes) && roomTypes.length > 0) {
      const keyLower = matchedTypeKey.toLowerCase();
      matchedTypeIds = roomTypes
        .filter((rt: any) => (rt.name || '').toString().toLowerCase().includes(keyLower))
        .map((rt: any) => rt.id)
        .filter(Boolean);
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏° keywords (‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô name, description, building, typeName ‡πÅ‡∏•‡∏∞ typeId)
    if (keywords && keywords.length > 0) {
      filteredRooms = filteredRooms.filter((r: any) => {
        const typeNames = (r.room_type?.name || r.room_type_name || r.type || r.type_name || '').toString();
        const typeIds = (r.room_type_id || r.roomTypeId || '').toString();
        const searchText = `${r.name || ''} ${r.description || ''} ${r.building || ''} ${typeNames} ${typeIds}`.toLowerCase();
        const textMatch = keywords.some((keyword: string) => searchText.includes(keyword.toLowerCase()));
        const typeIdMatch = matchedTypeIds.length > 0 && matchedTypeIds.includes(String(r.room_type_id || r.roomTypeId || ''));
        return textMatch || typeIdMatch;
      });
    }

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏° relevance (‡∏¢‡∏¥‡πà‡∏á capacity ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏¢‡∏¥‡πà‡∏á‡∏î‡∏µ)
    if (capacity_min || capacity_max) {
      const targetCapacity = capacity_min || capacity_max || 0;
      filteredRooms.sort((a: any, b: any) => {
        const diffA = Math.abs(a.capacity - targetCapacity);
        const diffB = Math.abs(b.capacity - targetCapacity);
        return diffA - diffB;
      });
    }

    console.log(`‚úÖ Found ${filteredRooms.length} rooms matching filters`);

    return {
      success: true,
      rooms: filteredRooms,
      filters: {
        capacity_min,
        capacity_max,
        keywords
      },
      explanation,
      total: filteredRooms.length
    };

  } catch (error: any) {
    console.error('AI Search Error:', error);
    return {
      success: false,
      error: error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤',
      rooms: []
    };
  }
});
